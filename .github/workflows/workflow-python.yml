name: Python workflow

on:
  workflow_call:
    inputs:
      working-directory:
        description: 'Working directory'
        required: true
        type: string
      python-version:
        description: 'Python version'
        required: true
        type: string
      pack-dependencies:
        description: 'Flag whether to include dependencies inside deployment package'
        required: true
        type: boolean
      tf-workspace-dev:
        description: 'Terraform workspace for dev environment'
        required: true
        type: string
      tf-workspace-prod:
        description: 'Terraform workspace for prod environment'
        required: true
        type: string
    secrets:
      TF_API_TOKEN:
        required: true

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check architecture
        run: echo "is_aarch64=$(if [ $(uname -m) = 'aarch64' ]; then echo 'true'; else echo 'false'; fi)" >> $GITHUB_ENV

      - name: Setup Python (x86_64)
        if: env.is_aarch64 != 'true'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Setup Python (ARM)
        if: env.is_aarch64 == 'true'
        uses: deadsnakes/action@v2.1.1
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: python -m unittest discover -v -s ./tests/ -p "*_test.py"

  create-package:
    name: Create Deployment Package
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        if: inputs.pack-dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create deployment package
        working-directory: ${{ inputs.working-directory }}/src
        run: zip -r ../deployment-package.zip .

      - name: Pack dependencies
        if: inputs.pack-dependencies
        working-directory: ${{ inputs.working-directory }}
        run: zip -r ./deployment-package.zip $(python -m site --user-site)

      - name: Upload deployment package
        uses: actions/upload-artifact@v2
        with:
          name: deployment-package
          path: ${{ inputs.working-directory }}/deployment-package.zip

  plan:
    needs: [test, create-package]
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/workflow-terraform.yml
    with:
      working-directory: ${{ inputs.working-directory }}
      environment: dev
      tf-workspace: ${{ inputs.tf-workspace-dev }}
      action: plan
      project-type: python
    secrets:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

  deploy-dev:
    needs: [test, create-package]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    uses: ./.github/workflows/workflow-terraform.yml
    with:
      working-directory: ${{ inputs.working-directory }}
      environment: dev
      tf-workspace: ${{ inputs.tf-workspace-dev }}
      action: apply
      project-type: python
    secrets:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

  deploy-prod:
    needs: [test, create-package]
    if: github.event_name == 'release' && github.event.action == 'published'
    uses: ./.github/workflows/workflow-terraform.yml
    with:
      working-directory: ${{ inputs.working-directory }}
      environment: prod
      tf-workspace: ${{ inputs.tf-workspace-prod }}
      action: apply
      project-type: python
    secrets:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
